<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用hexo新建文章并发布</title>
    <url>/2020/01/15/hexo-post-article/</url>
    <content><![CDATA[<p>【<strong>创建新文章</strong>】</p>
<p>​    根目录命令行输入<code>hexo new &lt;模板&gt; &lt;文章名&gt;</code> 新建文章，其中<code>&lt;模板&gt;</code>在根目录<code>scaffolds</code>文件夹中，默认情况下有三个模板<code>post</code>、<code>draft</code>、<code>page</code>。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
<th align="left">路径</th>
</tr>
</thead>
<tbody><tr>
<td>post</td>
<td>新建文章</td>
<td align="left">/source/_posts/</td>
</tr>
<tr>
<td>draft</td>
<td>新建草稿</td>
<td align="left">/source/_drafts/</td>
</tr>
<tr>
<td>page</td>
<td>新建页面（标签页，分类页等）</td>
<td align="left">/source/</td>
</tr>
</tbody></table>
<p>​     通常情况下使用<code>hexo new post &lt;title&gt;</code>即可，注意这里的<code>title</code>不是文章名，而是新建的文件名，具体文章中显示的文章标题可以在文章文件中修改。</p>
<p>【<strong>在博客中添加图片</strong>】</p>
<p>​    在博客的根目录的配置文件<code>_config.yml</code>中，找到 <code>post_asset_folder</code>项，设置为<code>true</code> ，这样在创建文章时会自动在文章<code>.md</code>所在目录<code>/source/_posts</code>文件夹内生成一个与文章同名的文件夹。例如新建文章<code>hexo new post example</code>则会生成一个<code>example.md</code>文件与一个名为<code>example</code>的文件夹。</p>
<p>把example这个博文需要展示的图片放在example文件夹目录下；</p>
<p>文章内使用<code>[% asset_img slug [title] %]</code>（将方括号][替换为花括号}{）的格式进行插入图片即可。</p>
<p>【<strong>发布新文章</strong>】</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo clean  <span class="comment">//清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line">$ hexo g 	  <span class="comment">//生成缓存和静态文件</span></span><br><span class="line">$ hexo d      <span class="comment">//重新部署到服务器</span></span><br></pre></td></tr></table></figure>

<p>​    以上是简写，也可以</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo clean    <span class="comment">//清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line">$ hexo generate <span class="comment">//生成静态页面</span></span><br><span class="line">$ hexo deploy   <span class="comment">//将文章部署到Github</span></span><br></pre></td></tr></table></figure>

<p>​    以上就是发布新文章到github，也可以部署到本地，在浏览中访问</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s  <span class="comment">//本地查看预览效果</span></span><br></pre></td></tr></table></figure>

<p> 浏览器打开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 即可查看效果，默认端口为4000</p>
<p>【<strong>关闭评论</strong>】</p>
<p>​    当集成了评论系统，如 多说 或者 Disqus，所有新建的页面都将自动开启评论。若你不需要评论，请在页面的 Front-matter 里添加 <code>comments</code> 字段，并将值设置为 <code>false</code>。如下所示： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: <span class="keyword">new</span> title</span><br><span class="line">date: <span class="number">2017</span><span class="number">-2</span><span class="number">-21</span> <span class="number">21</span>:<span class="number">34</span>:<span class="number">29</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2019 编译 opencv 32 位库</title>
    <url>/2019/12/01/Compile-the-opencv-to-32bit/</url>
    <content><![CDATA[<p><strong>配置：</strong></p>
<ul>
<li><p>windows 10</p>
</li>
<li><p>Visual Studio 2019 Community</p>
</li>
<li><p>Cmake 3.16</p>
</li>
<li><p>Opencv3.4.6 源码</p>
</li>
</ul>
<a id="more"></a>

<p><strong>【前言】</strong></p>
<p>由于opencv官网下载的程序只有 x64，也就是只有64位版本的，近期开发程序，要用到 32 版本的opencv，从网上找到教程自己编译 32 位版本的，磕磕碰碰也走了不少弯路，所以在此做个笔记，供自己以后参考，也给有需要的同学提供借鉴，少走一些弯路。</p>
<p><strong>第一步：</strong></p>
<p>下载opencv源码，我下载的源码是opencv3.4.6（其他版本一样）</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/1.png" alt="1"></p>
<p>源码如上图所示</p>
<p>接着在合适的位置新建一个文件夹（保存你编译后的代码），我是在源码的同一级目录新建了一个build32的文件夹【注：build文件夹位官方编译的】</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/2.png" alt="2"></p>
<p><strong>第二步：</strong></p>
<p>下载 Cmake，打开Cmake界面如下图所示：</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/3.png" alt="3"></p>
<p>在第一行选择你的源码所在的路径</p>
<p>在第二行选择你新建的文件夹（这个文件夹保存你编译后的代码）</p>
<p>选择完成后，点击左下角的 <u>Configure 按钮</u>  ，点击完成后，界面如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/4.png" alt="4"></p>
<p>第一行选择vs2019，第二行选择 win32，因为要编译成 32 位的代码，第三行不用填， 单选按钮选择第一个。点击 finish，这时候程序就开始编译了【注：编译期间需要联网下载dll，注意不要断网】，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/5.png" alt="5"></p>
<p>【注】因为我新建的build32文件夹已经有代码了，为了截图写博客，新建了一个test文件夹，请忽略。</p>
<p>编译完成如下图所示：</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/6.png" alt="6"></p>
<p>在红色区域找到  <strong>BUILD_opencv_world</strong> ，选中</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/7.png" alt="7"></p>
<p>再次点击 Configure 按钮，等待编译完成，这时候编译完成应该就没有红色区域了，如果还有红色区域的话，再点击一次 Configure 按钮，直到没有红色为止。</p>
<p>最后，点击 <u>Generate 按钮</u>，等待结束。</p>
<p><strong>第三步：</strong></p>
<p>这时候，在你新建的文件夹下【我的文件夹是build32】，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/8.png" alt="8"></p>
<p>你会看到 <u>OpenCV.sln</u> 文件，如果安装了vs的话，这个文件应该会和 VS 关联，双击会默认用 VS 打开，双击用VS打开，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/9.png" alt="9"></p>
<p>接下来，点击菜单栏的  <u>生成–&gt; 批生成</u>  ，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/10.png" alt="10"></p>
<p>找到 INSTALL , 把 Debug 和 Release 选中。再点击生成。程序会一直编译，时间有点长，我用我的笔记本电脑大概跑了2个小时【注：程序编译很吃CPU，在编译的过程中，我的CPU利用率一直是 100% 】</p>
<p>最后编译完成，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/11.png" alt></p>
<p>生成成功！</p>
<p><strong>第四步：</strong></p>
<p>打开你新建的文件夹【注：编译完成后文件夹很大，我的占用控件接近 4G】，这时候里面会多出一个 install 文件夹，打开 install 文件夹，看到里面有个 x86 文件（如下图所示），恭喜你，已经成功了，里面的目录结构和官方自带的 x64 文件夹的目录结构一样，include文件夹里面也是一些C++函数库，直接调用即可。</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/12.png" alt="12"></p>
]]></content>
      <categories>
        <category>opencv</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
</search>
