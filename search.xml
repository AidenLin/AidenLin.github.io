<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Qt在debian系统上运行出现的错误</title>
    <url>/2020/01/16/Qt-error-running-on-debian/</url>
    <content><![CDATA[<h5 id="【背景】"><a href="#【背景】" class="headerlink" title="【背景】"></a>【背景】</h5><p>将QT程序拷贝到 Debian 系统上编译时，报如下错误：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Unknown module(s) in QT: multimedia</span><br></pre></td></tr></table></figure>

<p>从网上找到问题所在，应该是程序打开了串口或者调用了多媒体库的问题。</p>
<p>【<strong>解决方法</strong>】</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qtmultimedia5-dev</span><br></pre></td></tr></table></figure>

<p>安装完即可。</p>
]]></content>
      <categories>
        <category>debian</category>
      </categories>
      <tags>
        <tag>qt</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客常见的错误</title>
    <url>/2020/01/16/hexo-common-mistakes/</url>
    <content><![CDATA[<p><code>hexo g</code> 生成静态文件的时候，在 public文件夹下面就是找不到，新写的文章就是无法生成对应的静态文件。</p>
<a id="more"></a>

<p>【<strong>解决方法</strong>】</p>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo  g  --debug</span><br></pre></td></tr></table></figure>

<p>去找debug输出的信息，判断哪一部分出了错，我找到的错误是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/16/hexo-common-mistakes/1.png" alt="1"></p>
<p>记得 tags 和 categories 冒号后面要加一个<strong>空格</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>debian安装cifs协议</title>
    <url>/2020/01/16/debian-install-cfis/</url>
    <content><![CDATA[<h5 id="【背景】"><a href="#【背景】" class="headerlink" title="【背景】"></a>【背景】</h5><p>  现在有一台windows系统（win10）电脑，有一台linux系统（debian9）电脑，有两个需求，我在Windows下面可以访问Linux系统的文件夹，在Linux下面可以访问Windows下面的文件夹。</p>
<a id="more"></a>



<blockquote>
<h3 id="Windows访问Linux系统的文件夹"><a href="#Windows访问Linux系统的文件夹" class="headerlink" title="Windows访问Linux系统的文件夹"></a>Windows访问Linux系统的文件夹</h3></blockquote>
<h5 id="【第一步】"><a href="#【第一步】" class="headerlink" title="【第一步】"></a>【第一步】</h5><p>这个功能实现需要在Linux系统上面安装samba。首先更换一下Linux系统的源（操作前请做好相应的备份）。直接编辑 <code>/etc/apt/sources.list</code> 文件（需要使用 sudo）。以下是 Debian Stable 参考配置内容（中科大的源）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/debian stable main contrib non-free</span></span><br><span class="line"><span class="meta"># deb-src http:<span class="comment">//mirrors.ustc.edu.cn/debian stable main contrib non-free</span></span></span><br><span class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/debian stable-updates main contrib non-free</span></span><br><span class="line"><span class="meta"># deb-src http:<span class="comment">//mirrors.ustc.edu.cn/debian stable-updates main contrib non-free</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># deb http:<span class="comment">//mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free</span></span></span><br><span class="line"><span class="meta"># deb-src http:<span class="comment">//mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free</span></span></span><br></pre></td></tr></table></figure>

<p> 更改完 sources.list 文件后请运行 <code>sudo apt-get update</code> 更新索引以生效。 </p>
<h5 id="【第二步】"><a href="#【第二步】" class="headerlink" title="【第二步】"></a>【第二步】</h5><p>Linux安装Samba</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install samba</span><br></pre></td></tr></table></figure>

<p>安装完成后，执行下面这条语句，看看samba是安装在哪个文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo find / -name samba</span><br></pre></td></tr></table></figure>

<p>我的是安装在 <code>/usr/share/samba</code> 这个目录下面，进入到这个目录中，找到 smb.conf 文件，打开这个文件并编辑，在文件的最后面添加如下内容：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[linux_share]</span><br><span class="line">        comment = This is a Shared folder <span class="keyword">for</span> Linux   #共享描述</span><br><span class="line">        path = /<span class="built_in">home</span>/debian/Desktop/linux_share       #共享目录路径</span><br><span class="line">        <span class="keyword">public</span> = yes                				  #允许guest用户访问</span><br><span class="line">        writable = yes                                #允许在linux_share目录下写入</span><br><span class="line">        directory mask = <span class="number">0775</span>                         #默认创建目录权限 rwxrwxrwx</span><br><span class="line">        create mask = <span class="number">0775</span>                            #默认创建文件权限 rwxrwxrwx</span><br><span class="line">        <span class="comment">//valid users = root  				          #允许访问该共享的用户</span></span><br><span class="line">        <span class="comment">//write list = root                           #可写入共享的用户列表</span></span><br><span class="line">        browseable = yes                              #该指定共享目录可浏览</span><br><span class="line">        <span class="built_in">available</span> = yes                               #该指定共享资源可使用</span><br></pre></td></tr></table></figure>

<p>由于我没创建用户，倒数三四两行我没写</p>
<p> 编辑好之后保存，然后运行如下命令重新加载 smb.conf，并重启 samba </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">/usr/sbin/service smbd reload   <span class="comment">//重新加载smb.conf</span></span><br><span class="line"></span><br><span class="line">/usr/sbin/service smbd restart  <span class="comment">//重启 samba</span></span><br></pre></td></tr></table></figure>

<p>【<strong>注</strong>】我的Linux系统找不到 service 命令，于是我又找到另一种方法</p>
<p>  在 <code>/etc/init.d/</code> 目录下面，找到了 smbd 服务，运行以下命令即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ./smbd reload</span><br><span class="line"></span><br><span class="line">sudo ./smbd restart</span><br></pre></td></tr></table></figure>

<p> 查看samba运行状态是否正常运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status smbd</span><br></pre></td></tr></table></figure>



<h5 id="【第三步】"><a href="#【第三步】" class="headerlink" title="【第三步】"></a>【第三步】</h5><p>ifconfig 命令找到 Linux 系统的 IP 地址，我查询到的是 192.168.100.31，你的 Windows 系统要和你的 Linux 系统在同一个网段下面才可以访问。</p>
<p>关闭防火墙，找不到命令 <code>Unit firewalld.service not loaded.</code>， 安装 firewalld，<code>sudo apt-get install firewalld</code>。</p>
<p>执行 <code>sudo systemctl stop firewalld.service</code>  </p>
<p>或者 <code>/usr/sbin/service firewalld stop</code> 关闭防火墙</p>
<p>使用 <code>systemctl disable firewalld.service</code> 彻底关闭防火墙</p>
<p>在Windows系统，win+R键，输入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">\\你的IP地址    <span class="comment">//我的是 \\192.168.100.31 即可看到你共享的文件夹</span></span><br></pre></td></tr></table></figure>

<p>如果还是看不到文件夹，那么尝试下面这种方法</p>
<blockquote>
<p><strong>启用Windows SMB功能</strong></p>
</blockquote>
<p> Win10自带的 CIFS 文件共享支持 默认没有启用，因此无法访问samba共享出来的文件夹 ，搜索 Windows 功能，选择启用或关闭Windows功能，在弹窗中下拉找到 SMB 1.0/CIFS File Sharing Support（或CIFS 文件共享支持），勾选确认重启即可</p>
<blockquote>
<h3 id="Linux下面访问Windows下面的文件夹"><a href="#Linux下面访问Windows下面的文件夹" class="headerlink" title="Linux下面访问Windows下面的文件夹"></a>Linux下面访问Windows下面的文件夹</h3></blockquote>
<p>【<strong>第一步</strong>】</p>
<p>在Windows下面新建一个文件夹，然后右击 -&gt; 属性 -&gt; 共享 -&gt; 共享 -&gt; 添加Everyone -&gt; 共享 -&gt; 完成。</p>
<p>【<strong>第二步</strong>】</p>
<p><code>sudo apt install cifs-utils</code> 安装cifs协议</p>
<p><code>ipconfig</code> 查看你的 Windows IP地址，执行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo mount -t cifs <span class="comment">//172.16.13.48/debiantest    /home/debian/Desktop/share</span></span><br><span class="line">#注释               windowsIP地址 windows共享文件名     linux下面的文件路径</span><br></pre></td></tr></table></figure>

<p>挂载成功以后，你在 linux  share文件夹下面新建的文件，会在 Windows 下的文件夹同步显示。</p>
<p>【<strong>第三步</strong>】</p>
<p>我的 第二步挂载失败，报错 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount error : cifs filesystem not supported by the system mount</span><br><span class="line"></span><br><span class="line">error(19): No such device</span><br></pre></td></tr></table></figure>

<p>应该是我的系统不支持 cifs 协议，再确认一下是不是系统的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zgrep -i cifs /proc/config.gz</span><br></pre></td></tr></table></figure>

<p>执行以后，返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># CONFIG_CIFS is not set</span><br></pre></td></tr></table></figure>

<p>估计是系统不支持 CIFS 协议，后来和厂家沟通，厂家给了两个deb包，安装可以了</p>
<p>安装包的百度云链接：</p>
<p>链接：<a href="https://pan.baidu.com/s/1tM9pghmo9UI_ENkMGRR_ug" target="_blank" rel="noopener">https://pan.baidu.com/s/1tM9pghmo9UI_ENkMGRR_ug</a><br>提取码：hdha</p>
<p>将安装包拷贝到 Linux 系统，运行如下命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i linux-headers<span class="number">-4.9</span><span class="number">.11</span>_4<span class="number">.9</span><span class="number">.11</span><span class="number">-2</span>_armhf.deb</span><br><span class="line">sudo dpkg -i linux-<span class="built_in">image</span><span class="number">-4.9</span><span class="number">.11</span>_4<span class="number">.9</span><span class="number">.11</span><span class="number">-2</span>_armhf.deb</span><br></pre></td></tr></table></figure>

<p>再执行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sudo /sbin/modprobe fuse</span><br><span class="line">sudo /sbin/modprobe cifs</span><br><span class="line"></span><br><span class="line">sudo lsmod | grep cifs  <span class="comment">//查看cifs是否运行</span></span><br></pre></td></tr></table></figure>

<p>最后再执行【<strong>第二步</strong>】即可。</p>
<p>【<strong>笔记</strong>】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#以下命令无效</span><br><span class="line">sudo apt install selinux-utils</span><br><span class="line">sudo /usr/sbin/getenforce</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
        <category>debian</category>
      </categories>
      <tags>
        <tag>cifs</tag>
        <tag>samba</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian(32位)安装QT</title>
    <url>/2020/01/16/debian-install-qt/</url>
    <content><![CDATA[<p>【<strong>系统配置</strong>】</p>
<p>​    Debian 9.3 （stretch）【armv7l GNU/Linux】</p>
<p>​    Qt 5.5.1 (qt-opensource-linux-x86-5.5.1.run)</p>
<a id="more"></a>

<p>[ 注：qt linux5.5以后的版本只支持64位系统，所以32位的系统只能安装5.5以前的 ]</p>
<p>【<strong>注意:</strong>】由于我的debian系统不是x86的，所以官网上下载的.run安装包无法运行安装。我的运行会报错 <code>Syntax error: &quot;(&quot; unexpected</code></p>
<p><strong>如果你的debian系统运行 uname -a 显示如下内容，你就可以继续往下看了，如果不是，那这篇教程可能不适合你</strong></p>
<p><code>Linux debian 4.9.11 #1 SMP PREEMPT Mon Nov 25 16:53:24 CST 2019 armv7l GNU/Linux</code></p>
<p>【<strong>开始安装</strong>】</p>
<p>链接：<a href="https://pan.baidu.com/s/1mewS-G2aKyIkBvCQR3NMUw" target="_blank" rel="noopener">https://pan.baidu.com/s/1mewS-G2aKyIkBvCQR3NMUw</a><br>提取码：tjjx </p>
<p>这是QT安装包，下载解压以后运行 install.sh 文件即可安装，需要 root 权限</p>
<p>安装完成后就可以找到Qt Creator程序</p>
<p>【<strong>配置 qmake</strong>】</p>
<p>安装完成后，新建QT工程，测试有可能会报错，找不到 qmake</p>
<p>我的安装成功，新建工程测试，构建的时候会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error while building/deploying project demo(kit: Desktop)</span><br><span class="line"></span><br><span class="line">When executing step &quot;qmake&quot;</span><br></pre></td></tr></table></figure>

<p>执行 <code>ls -al /usr/bin/qmake</code> 可以看到 qmake是链接到  <code>qmake -&gt; qtchooser</code>，链接有误</p>
<p>这时候应该删除链接 <code>sudo rm /usr/bin/qmake</code></p>
<p>然后再重新建立链接，链接到新安装的qmake</p>
<p><code>sudo ln -s /usr/lib/arm-linux-gnueabihf/qt5/bin/qmake /usr/bin/qmake</code></p>
<p>再执行 <code>qmake -v</code>，应该没问题了</p>
<p>【<strong>配置编译器 gcc g++</strong>】</p>
<p><code>$ sudo aptitude install gcc g++ build-essential make automake autogen autoconf</code></p>
<p>执行这个命令，安装一下 gcc g++等</p>
<p>安装后的gcc g++ 所在的 linux 的目录为 <code>/usr/bin/gcc</code> 和 <code>/usr/bin/g++</code></p>
<p>最后在 Tools -&gt; Options… -&gt; Build &amp; Run -&gt; Kits  把 Compiler: c 和 c++的路径配置一下即可。 </p>
]]></content>
      <categories>
        <category>debian</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2020/01/15/linux-common-commands/</url>
    <content><![CDATA[<p>【<strong>1</strong>】Linux uname命令用于显示系统信息。uname可显示电脑以及操作系统的相关信息。</p>
<a id="more"></a>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">uname -a</span><br><span class="line">    </span><br><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure>



<p>【<strong>2</strong>】Linux查看发行版本信息（Debian为例）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line"></span><br><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure>



<p>【<strong>3</strong>】查看Linux系统是 32 位还是 64 位</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">getconf WORD_BIT  <span class="comment">//获得word位数</span></span><br><span class="line"></span><br><span class="line">getconf LONG_BIT  <span class="comment">//获得long位数</span></span><br></pre></td></tr></table></figure>

<p> 64位系统中应该分别得到32和64。32位系统中应该分别得到32和32。 </p>
<p>【<strong>4</strong>】Linux回收站所在的路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~/.local/share/Trash</span><br></pre></td></tr></table></figure>



<p>【<strong>5</strong>】 Linux cp命令主要用于复制文件或目录</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cp [options] source dest</span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong>：</p>
<ul>
<li>-f：覆盖已经存在的目标文件而不给出提示。</li>
<li>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</li>
<li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li>
</ul>
<p>【<strong>6</strong>】chmod命令改写文件读写权限</p>
<p> Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">chmod [-cfvR] [--help] [--version] mode file...</span><br><span class="line"></span><br><span class="line">chmod ugo+r file1.txt</span><br><span class="line">chmod ug+w,o-w file1.txt file2.txt</span><br><span class="line">chmod -R <span class="number">777</span> file</span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong></p>
<ul>
<li><p>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</p>
</li>
<li><p>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</p>
</li>
<li><p>-f : 若该文件权限无法被更改也不要显示错误讯息</p>
</li>
<li><p>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</p>
</li>
</ul>
<p>【<strong>7</strong>】远程连接 linux 失败</p>
<ol>
<li>服务器ssh服务未安装或者关闭状态</li>
</ol>
<ul>
<li>服务器执行命令 查看ssh状态</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -e |grep ssh</span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有安装执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>服务器防火墙状态未关闭</li>
</ol>
<ul>
<li>服务器执行命令查看防火墙状态</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service iptables status</span><br><span class="line"></span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>如果没关闭，执行代码关闭防火墙</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>



<p>【<strong>8</strong>】linux挂载U盘</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ls /dev/sd*  <span class="comment">//列举/dev下设备文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入U盘</span></span><br><span class="line">ls /dev/sd* <span class="comment">//多出来的就是你插入的U盘</span></span><br><span class="line">sudo mount /dev/sda4 /mnt/   <span class="comment">//我的设备名是sda4,把U盘挂载到 /mnt/目录下,也可以自己新建文件夹</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//卸载</span></span><br><span class="line">umount /dev/sda4</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">umount /mnt/ 	<span class="comment">//卸载挂载文件或者卸载挂载点都可以</span></span><br></pre></td></tr></table></figure>

<p> <strong>参数说明：</strong> </p>
<ul>
<li><p>-v：显示较讯息，通常和 -f 用来除错。</p>
</li>
<li><p>-a：将 /etc/fstab 中定义的所有档案系统挂上。</p>
</li>
<li><p>-F：这个命令通常和 -a 一起使用，它会为每一个 mount 的动作产生一个进程负责执行。在系统需要挂上大量 NFS 档案系统时可以加快挂上的动作。</p>
</li>
<li><p>-t：指定档案系统的型态，通常不必指定。mount 会自动选择正确的型态。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>debian</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo新建文章并发布</title>
    <url>/2020/01/15/hexo-post-article/</url>
    <content><![CDATA[<p>【<strong>创建新文章</strong>】</p>
<p>​    根目录命令行输入<code>hexo new &lt;模板&gt; &lt;文章名&gt;</code> 新建文章，其中<code>&lt;模板&gt;</code>在根目录<code>scaffolds</code>文件夹中，默认情况下有三个模板<code>post</code>、<code>draft</code>、<code>page</code>。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
<th align="left">路径</th>
</tr>
</thead>
<tbody><tr>
<td>post</td>
<td>新建文章</td>
<td align="left">/source/_posts/</td>
</tr>
<tr>
<td>draft</td>
<td>新建草稿</td>
<td align="left">/source/_drafts/</td>
</tr>
<tr>
<td>page</td>
<td>新建页面（标签页，分类页等）</td>
<td align="left">/source/</td>
</tr>
</tbody></table>
<p>​     通常情况下使用<code>hexo new post &lt;title&gt;</code>即可，注意这里的<code>title</code>不是文章名，而是新建的文件名，具体文章中显示的文章标题可以在文章文件中修改。</p>
<p>【<strong>在博客中添加图片</strong>】</p>
<p>​    在博客的根目录的配置文件<code>_config.yml</code>中，找到 <code>post_asset_folder</code>项，设置为<code>true</code> ，这样在创建文章时会自动在文章<code>.md</code>所在目录<code>/source/_posts</code>文件夹内生成一个与文章同名的文件夹。例如新建文章<code>hexo new post example</code>则会生成一个<code>example.md</code>文件与一个名为<code>example</code>的文件夹。</p>
<p>把example这个博文需要展示的图片放在example文件夹目录下；</p>
<p>文章内使用<code>[% asset_img slug [title] %]</code>（将方括号][替换为花括号}{）的格式进行插入图片即可。</p>
<p>【<strong>发布新文章</strong>】</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo clean  <span class="comment">//清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line">$ hexo g 	  <span class="comment">//生成缓存和静态文件</span></span><br><span class="line">$ hexo d      <span class="comment">//重新部署到服务器</span></span><br></pre></td></tr></table></figure>

<p>​    以上是简写，也可以</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo clean    <span class="comment">//清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line">$ hexo generate <span class="comment">//生成静态页面</span></span><br><span class="line">$ hexo deploy   <span class="comment">//将文章部署到Github</span></span><br></pre></td></tr></table></figure>

<p>​    以上就是发布新文章到github，也可以部署到本地，在浏览中访问</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s  <span class="comment">//本地查看预览效果</span></span><br></pre></td></tr></table></figure>

<p> 浏览器打开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 即可查看效果，默认端口为4000</p>
<p>【<strong>关闭评论</strong>】</p>
<p>​    当集成了评论系统，如 多说 或者 Disqus，所有新建的页面都将自动开启评论。若你不需要评论，请在页面的 Front-matter 里添加 <code>comments</code> 字段，并将值设置为 <code>false</code>。如下所示： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: <span class="keyword">new</span> title</span><br><span class="line">date: <span class="number">2017</span><span class="number">-2</span><span class="number">-21</span> <span class="number">21</span>:<span class="number">34</span>:<span class="number">29</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2019 编译 opencv 32 位库</title>
    <url>/2019/12/01/Compile-the-opencv-to-32bit/</url>
    <content><![CDATA[<p><strong>配置：</strong></p>
<ul>
<li><p>windows 10</p>
</li>
<li><p>Visual Studio 2019 Community</p>
</li>
<li><p>Cmake 3.16</p>
</li>
<li><p>Opencv3.4.6 源码</p>
</li>
</ul>
<a id="more"></a>

<p><strong>【前言】</strong></p>
<p>由于opencv官网下载的程序只有 x64，也就是只有64位版本的，近期开发程序，要用到 32 版本的opencv，从网上找到教程自己编译 32 位版本的，磕磕碰碰也走了不少弯路，所以在此做个笔记，供自己以后参考，也给有需要的同学提供借鉴，少走一些弯路。</p>
<p><strong>第一步：</strong></p>
<p>下载opencv源码，我下载的源码是opencv3.4.6（其他版本一样）</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/1.png" alt="1"></p>
<p>源码如上图所示</p>
<p>接着在合适的位置新建一个文件夹（保存你编译后的代码），我是在源码的同一级目录新建了一个build32的文件夹【注：build文件夹位官方编译的】</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/2.png" alt="2"></p>
<p><strong>第二步：</strong></p>
<p>下载 Cmake，打开Cmake界面如下图所示：</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/3.png" alt="3"></p>
<p>在第一行选择你的源码所在的路径</p>
<p>在第二行选择你新建的文件夹（这个文件夹保存你编译后的代码）</p>
<p>选择完成后，点击左下角的 <u>Configure 按钮</u>  ，点击完成后，界面如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/4.png" alt="4"></p>
<p>第一行选择vs2019，第二行选择 win32，因为要编译成 32 位的代码，第三行不用填， 单选按钮选择第一个。点击 finish，这时候程序就开始编译了【注：编译期间需要联网下载dll，注意不要断网】，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/5.png" alt="5"></p>
<p>【注】因为我新建的build32文件夹已经有代码了，为了截图写博客，新建了一个test文件夹，请忽略。</p>
<p>编译完成如下图所示：</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/6.png" alt="6"></p>
<p>在红色区域找到  <strong>BUILD_opencv_world</strong> ，选中</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/7.png" alt="7"></p>
<p>再次点击 Configure 按钮，等待编译完成，这时候编译完成应该就没有红色区域了，如果还有红色区域的话，再点击一次 Configure 按钮，直到没有红色为止。</p>
<p>最后，点击 <u>Generate 按钮</u>，等待结束。</p>
<p><strong>第三步：</strong></p>
<p>这时候，在你新建的文件夹下【我的文件夹是build32】，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/8.png" alt="8"></p>
<p>你会看到 <u>OpenCV.sln</u> 文件，如果安装了vs的话，这个文件应该会和 VS 关联，双击会默认用 VS 打开，双击用VS打开，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/9.png" alt="9"></p>
<p>接下来，点击菜单栏的  <u>生成–&gt; 批生成</u>  ，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/10.png" alt="10"></p>
<p>找到 INSTALL , 把 Debug 和 Release 选中。再点击生成。程序会一直编译，时间有点长，我用我的笔记本电脑大概跑了2个小时【注：程序编译很吃CPU，在编译的过程中，我的CPU利用率一直是 100% 】</p>
<p>最后编译完成，如下图所示</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/11.png" alt></p>
<p>生成成功！</p>
<p><strong>第四步：</strong></p>
<p>打开你新建的文件夹【注：编译完成后文件夹很大，我的占用控件接近 4G】，这时候里面会多出一个 install 文件夹，打开 install 文件夹，看到里面有个 x86 文件（如下图所示），恭喜你，已经成功了，里面的目录结构和官方自带的 x64 文件夹的目录结构一样，include文件夹里面也是一些C++函数库，直接调用即可。</p>
<p><img src="/2019/12/01/Compile-the-opencv-to-32bit/12.png" alt="12"></p>
]]></content>
      <categories>
        <category>opencv</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
</search>
