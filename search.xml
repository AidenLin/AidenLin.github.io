<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>安装交叉编译器</title>
    <url>/2019/11/14/test2/</url>
    <content><![CDATA[<p>回顾：<br>1、安装交叉编译器<br>arm-linux-gcc<br>gcc编译出来的结果是在ubuntu上运行，在开发板上无法运行<br>arm-linux-gcc: 交叉编译，编译出来的结果，可以在arm芯片上使用</p>
<p>2、编译&amp;&amp;下载uboot<br>1）源代码解压<br>2）选择开发板  make tiny4412_config<br>3）make<br>4）下载</p>
<p>3、编译&amp;&amp;下载内核<br>1）源代码解压<br>2）配置  make menuconfig<br>3）修改makefile，把编译器改为交叉编译<br>4）make &amp;&amp; make zImage</p>
<p>4、制作根文件系统</p>
<ul>
<li>pri：打印环境变量</li>
<li>nfs:网络文件系统</li>
<li>nfsroot: 虚拟机的ip地址+网络文件系统</li>
<li>ip:开发板的ip;虚拟机的ip;网关地址;子网掩码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eth0: link is not ready</span><br><span class="line">no soundcards found</span><br></pre></td></tr></table></figure>


<p>source insight：windows下面查看linux内核源码的强大工具</p>
<p>字符驱动<br>一、什么是驱动？<br>作用：操作硬件，给应用层提供统一的接口。</p>
<p>二、驱动编程框架（模块化编程）<br>1）驱动框架<br>2）驱动相关命令</p>
<ul>
<li>insmod：加载驱动</li>
<li>rmmod：卸载驱动</li>
<li>lsmod：查看已经动态加载的驱动</li>
</ul>
<p>三、字符驱动的编写</p>
<p>杂项设备注册：<br>注册函数：misc_register();</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int misc_register(struct miscdevice *misc)</span><br></pre></td></tr></table></figure>


<p>注销：</p>
<p>四、驱动层read、write的使用</p>
<p>五、led灯驱动<br>想让灯亮，要干什么？<br>1）查看原理图，确定led灯是哪个IO口驱动。</p>
<p>2）</p>
<p>申请使用IO口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpio_request</span><br></pre></td></tr></table></figure>

<p>配置IO口工作模式为输出模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s3c_gpio_cfgpin</span><br></pre></td></tr></table></figure>

<p>输出高低电平，控制LED</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpio_set_value</span><br><span class="line"></span><br><span class="line">gpio_get_value</span><br></pre></td></tr></table></figure>

<p>配置IO口工作模式为输出模式<br>      输出高低电平，控制LED</p>
<p>3）</p>
<blockquote>
<p>作业：</p>
</blockquote>
<p>1) 完善led驱动，实现支持4个LED<br>例如：write(fd, “1010”, 4); // 同时控制四个led灯的状态</p>
<p>2) 写beep驱动（蜂鸣器驱动）<br>PWM0<br>XpwmTOUT0<br>GPD0_</p>
<p>LED灯的IO口：EXYNOS4X12_GPM4(0)<br>蜂鸣器的IO口：EXYNOS4_GPD0(0)</p>
]]></content>
  </entry>
  <entry>
    <title>Exy4412产品发布</title>
    <url>/2019/11/13/new-article-test/</url>
    <content><![CDATA[<h4 id="Exy4412产品发布"><a href="#Exy4412产品发布" class="headerlink" title="Exy4412产品发布"></a>Exy4412产品发布</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">准备工作：</span><br><span class="line">产品发布之前需要保证程序能够自动运行</span><br><span class="line">1）开机自动运行shell，不需要用户输入enter键</span><br><span class="line">2）把开机之后需要执行的命令放到开机自启动文件内。/etc/profile文件</span><br></pre></td></tr></table></figure>


<ul>
<li>insmod /work/key_drv.ko</li>
<li>/work/ui.out &amp;    (后台运行)</li>
<li>/work/ctrl.out &amp;</li>
</ul>
<p>1、挂载方式<br>2、配置内核支持</p>
<h2 id="3、重新烧写uboot以及内核"><a href="#3、重新烧写uboot以及内核" class="headerlink" title="3、重新烧写uboot以及内核"></a>3、重新烧写uboot以及内核</h2><p>4、烧写根文件系统到ext3格式的文件</p>
<p>4.1、进入uboot命令，格式化sd卡</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdisk -c 0 320 2057 520</span><br><span class="line"> fatformat mmc 0:1</span><br><span class="line"> ext3format mmc 0:2</span><br><span class="line"> ext3format mmc 0:3</span><br><span class="line"> ext3format mmc 0:4</span><br></pre></td></tr></table></figure>


<p>4.2、复制根文件系统到系统sd卡存放根文件系统的分区<br>把 sd 卡拔出放到虚拟机上，把之前制作好的根文件系统拷贝到 ext3 格式文件的分区<br>查看sd卡分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# ls /dev/sd*</span><br><span class="line">/dev/sdb /dev/sdb1 /dev/sdb2 /dev/sdb3 /dev/sdb4</span><br></pre></td></tr></table></figure>


<p>查看sd卡详细分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# fdisk -l /dev/sdb</span><br></pre></td></tr></table></figure>


<p>4.3、把 sd 卡分区 2 的设备节点挂载到/mnt 目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost root_nfs]# mkdir /mnt/sdb</span><br><span class="line">[root@localhost root_nfs]# mount -t ext3 /dev/sdb2  /mnt/sdb/</span><br><span class="line">[root@localhost root_nfs]# ls /mnt/sdb/</span><br><span class="line"> lost+found</span><br></pre></td></tr></table></figure>


<p>4.4、 把制作好的根文件系统拷贝到/mnt<br>进入根文件系统目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# cd /xyd/rootfs</span><br><span class="line">[root@localhost root_nfs]# ls</span><br></pre></td></tr></table></figure>


<p>复制全部文件到 sd 卡分区 2 所接的目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost root_nfs]# cp * -R /mnt/sdb/</span><br><span class="line">[root@localhost root_nfs]# ls /mnt/sdb</span><br></pre></td></tr></table></figure>


<p>4.5、重启开发板，修改 u-boot 环境变量<br>拷贝完成后，放回 tiny4412 中，启动 u-boot，修改 bootargs。<br> set bootargs root=/dev/mmcblk0p2 rootfstype=ext3 console=ttySAC0,115200 init=/linuxrc uhost0=y ctp=2 skipcali=y lcd=X710</p>
<p>保存环境变量：<br>SMDK4412 # save<br>Saving Environment to SMDK bootable device… done<br>SMDK4412 # boot</p>
]]></content>
  </entry>
  <entry>
    <title>new article</title>
    <url>/2019/11/13/new-article/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="comment">//客户端socket</span></span><br><span class="line"><span class="keyword">int</span> client_sock;</span><br><span class="line"><span class="comment">//文件路径</span></span><br><span class="line"><span class="keyword">char</span> path[<span class="number">100</span>];</span><br><span class="line"><span class="comment">//段口号</span></span><br><span class="line"><span class="keyword">char</span> port[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送线程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sendsocket</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//接受socket</span></span><br><span class="line">	<span class="keyword">int</span> st = *(<span class="keyword">int</span> *)arg;</span><br><span class="line">	<span class="keyword">char</span> sendbuffer[<span class="number">100</span>]; </span><br><span class="line">	<span class="keyword">char</span> writebuffer[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">//向服务器发送数据 </span></span><br><span class="line">		<span class="built_in">memset</span>(sendbuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(sendbuffer)); </span><br><span class="line">		<span class="comment">//printf("请输入消息：");</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,sendbuffer);</span><br><span class="line">		<span class="built_in">memset</span>(writebuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(writebuffer)); </span><br><span class="line">		<span class="built_in">strcat</span>(writebuffer,sendbuffer);</span><br><span class="line">		<span class="built_in">strcat</span>(writebuffer,<span class="string">"\n"</span>);</span><br><span class="line">		<span class="comment">//写入文件</span></span><br><span class="line">		<span class="built_in">write</span>(fd,writebuffer,<span class="keyword">sizeof</span>(writebuffer));</span><br><span class="line">		<span class="comment">//发送消息</span></span><br><span class="line">		send(st, sendbuffer, <span class="built_in">strlen</span>(sendbuffer), <span class="number">0</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受线程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">recvsocket</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> st = *(<span class="keyword">int</span> *)arg;</span><br><span class="line">	<span class="keyword">char</span> receivebuffer[<span class="number">100</span>]; </span><br><span class="line">	<span class="keyword">char</span> writebuffer[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">int</span> n; </span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">//读取服务器传回的数据 </span></span><br><span class="line">		<span class="built_in">memset</span>(receivebuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(receivebuffer));</span><br><span class="line">		n = recv(st, receivebuffer, <span class="keyword">sizeof</span>(receivebuffer), <span class="number">0</span>);  </span><br><span class="line">		<span class="comment">//用于判断通信是否结束 </span></span><br><span class="line">		<span class="keyword">if</span>(n&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;		</span><br><span class="line">		<span class="built_in">memset</span>(writebuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(writebuffer)); </span><br><span class="line">		<span class="built_in">strcat</span>(writebuffer,receivebuffer);</span><br><span class="line">		<span class="built_in">strcat</span>(writebuffer,<span class="string">"\n"</span>);</span><br><span class="line">		<span class="comment">//写入文件</span></span><br><span class="line">		<span class="built_in">write</span>(fd,writebuffer,<span class="keyword">sizeof</span>(writebuffer));</span><br><span class="line">		<span class="comment">//输出</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, receivebuffer);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建套接字 </span></span><br><span class="line">	<span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); </span><br><span class="line">	<span class="comment">//向服务器(特定的IP和端口)发起请求 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span> </span><br><span class="line">	<span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));<span class="comment">//每个字节都用0填充 </span></span><br><span class="line">	serv_addr.sin_family = AF_INET; </span><br><span class="line">	serv_addr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>); </span><br><span class="line">	serv_addr.sin_port = htons(<span class="number">6666</span>); </span><br><span class="line"></span><br><span class="line">	<span class="comment">//连接服务器，成功返回0 </span></span><br><span class="line">	client_sock = <span class="built_in">connect</span>(sock, (struct sockaddr*)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">	<span class="keyword">if</span>(client_sock == <span class="number">0</span>) &#123; </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"服务器连接成功!\n"</span>); </span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">//新建一个结构体</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span> </span><br><span class="line">	<span class="built_in">memset</span>(&amp;client_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(client_addr));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">	<span class="comment">//获得本程序的sockaddr_in结构体</span></span><br><span class="line">	<span class="keyword">int</span> ti = getsockname(sock, (struct sockaddr*)&amp;client_addr, &amp;len);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对字符串拼接得到路径</span></span><br><span class="line">	<span class="built_in">sprintf</span>(port,<span class="string">"%d"</span>,client_addr.sin_port);</span><br><span class="line">	<span class="built_in">strcat</span>(path,<span class="string">"./usernote/"</span>);</span><br><span class="line">	<span class="built_in">strcat</span>(path,port);</span><br><span class="line">	<span class="comment">//打开文件</span></span><br><span class="line">	fd = <span class="built_in">open</span>(path, O_CREAT|O_EXCL|O_WRONLY|O_APPEND|O_NONBLOCK);</span><br><span class="line">	<span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"失败！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建发送接受两个线程  一个接受线程一个发送线程</span></span><br><span class="line">	<span class="keyword">pthread_t</span> thrd1, thrd2;</span><br><span class="line">	pthread_create(&amp;thrd1, <span class="literal">NULL</span>, sendsocket, &amp;sock);</span><br><span class="line">	pthread_create(&amp;thrd2, <span class="literal">NULL</span>, recvsocket, &amp;sock);</span><br><span class="line">	pthread_join(thrd1, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_join(thrd2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//关闭文件</span></span><br><span class="line">	<span class="built_in">close</span>(fd);</span><br><span class="line">	<span class="comment">//关闭套接字 </span></span><br><span class="line">	<span class="built_in">close</span>(sock); </span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>My New Post</title>
    <url>/2019/11/12/My-New-Post/</url>
    <content><![CDATA[<p>对于屏幕和键盘有要求的用户，这一次的新品或许很有吸引力。</p>
<p>北京时间 11 月 13 日晚，和 AirPods Pro 一样，苹果再一次在官网悄悄更新了产品，带来了 16 英寸的 MacBook Pro。虽然没有召开发布会有些出人意料，但这款全新的 MacBook Pro 依然给我们带来了很多升级和亮点，接下来和极客之选（公众号 GeekChoice）一起看看吧。</p>
<h2 id="更大显示屏和更强处理器"><a href="#更大显示屏和更强处理器" class="headerlink" title="更大显示屏和更强处理器"></a>更大显示屏和更强处理器</h2><p>近几年在 Windows 笔记本阵营中出现了越来越多的窄边框笔记本电脑，无论是戴尔 XPS 系列还是华为 MateBook 系列，更大的屏占比带来了笔记本电脑视觉上的更好体验，这一点同样也出现在这一次的新 MacBook Pro 上面。</p>
<p><img src="https://imgslim.geekpark.net/uploads/image/file/20/90/2090c0fab86518bf8a6828c5cc683eab.png" alt="img"></p>
<p>全新 MacBook Pro 采用了窄边框设计，通过缩小左右边框宽度，在加入 16 英寸屏幕的同时却将机身三围控制在 35.79<em>24.59</em>1.62cm，这一尺寸相比之前的 MacBook Pro 15 英寸版本来说几乎没有多少变化（后者为 34.93<em>24.07</em>1.55cm），但却带来了更大的显示面积，这或许是其替换掉 15 英寸 MacBook Pro 的主要原因。</p>
<p>除了屏幕变大，16 英寸 MacBook Pro 采用了 IPS 屏幕，分辨率也达到了 3072×1920（ppi 226），其亮度为 500 尼特，支持 P3 广色域和原彩显示。</p>
<p><img src="https://imgslim.geekpark.net/uploads/image/file/b3/af/b3af27b25974d5e9e15a640f314a31f4.png" alt="img"></p>
<p>16 英寸 MacBook Pro 搭载了第九代酷睿处理器（分为 i7 和 i9 两个版本），最高可选配 2.4GHz 8 核 Intel Core i9 处理器。内存为 16GB，最高可选配 64GB，更支持最高 8TB 固态硬盘可选配置。显卡部分采用 AMD Radeon Pro 5000M 系列。与上一代基础机型相比，其图形处理速度快达两倍以上，能更快地渲染并流畅播放超高清视频。</p>
<p>另外，本次 MacBook Pro 依然配备了四个雷雳 3 (USB-C) 端口，这些配置升级对电脑散热提出了更高要求，官方表示相比前代产品而言，16 英寸的新 MacBook Pro 气流量增加 28%，散热器增大 35%，使 MacBook Pro 的最大持续功率提升了 12 瓦，散热效果更加强大了。</p>
<h2 id="Touch-Bar-和键盘改进"><a href="#Touch-Bar-和键盘改进" class="headerlink" title="Touch Bar 和键盘改进"></a>Touch Bar 和键盘改进</h2><p>硬件配置升级之外，16 英寸 MacBook Pro 最大的变化在于对 Touch Bar 和键盘的改进。</p>
<p>此前在 macOS Catalina 10.15.1 更新中，就有开发者发现苹果将 MacBook Pro 的 Touch Bar 部分改进，具体表现就是 Touch ID/电源按键和 Touch Bar 触控条分开。</p>
<p>这种改进其实是为了更好解决之前出现的 Touch Bar 带来的问题，早前曾经有人遇到过将 MacBook Pro 连接外置显示器后再次打开电脑，屏幕背光会变成 0，这种情况下想要调整屏幕亮度又必须登录，然而登录需要按下无法工作的 Touch Bar 区域的 Touch ID/电源按键，这样的设计显然存在一定问题，也是苹果如此改进的原因之一。</p>
<p><img src="https://imgslim.geekpark.net/uploads/image/file/9d/dc/9ddc761c827892da96eeab64c45a3c12.png" alt="img"></p>
<p>还有键盘部分，早前受到吐槽的蝶式键盘在这一代上终于被剪刀式键盘取代，除了改进手感使其相比之前更稳定外，也修正了近年来蝶式键盘进灰失灵的缺陷，这一点或许是相比处理器对很多用户更有吸引力的一大变化。</p>
<p><img src="https://imgslim.geekpark.net/uploads/image/file/3a/3e/3a3eaee29268b5a129dc25b2368b11ce.png" alt="img"></p>
<p>对了，MacBook Pro 这一次还加强了电脑的声音表现和续航时间。六扬声器音响系统可营造更好的立体声音效。并且其双振动抵消低音单元能有效减少系统振动带来的影响，低音部分进一步增强。同时，内置的三麦克风阵列也方便用户随时随地创作音色纯净的音频内容，续航时间最长达到 11 小时，整体来说表现不错。</p>
<p>最后是价格，16 英寸 MacBook Pro 有 AMD Radeon Pro 5300M 和 5500M 独显版本，起步价格分别为 18999 和 22199 元。自 2012 年停产 17 英寸 MacBook Pro 以来，苹果的 MacBook Pro 产品线只剩下 13、15 英寸两个版本，对于需要更大屏幕笔记本电脑工作的用户来说，这无疑带来了一些影响。这次提升集中在屏幕尺寸上，目标群体上比较明确，倾向于有生产力需求的人群，而非轻办公用户。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
